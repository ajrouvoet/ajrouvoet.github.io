- authors:

  - who: Hendrik van Antwerpen
    affiliation: Delft University of Technology
    site: https://hendrik.van-antwerpen.net/publications/
  - who: Casper Bach Poulsen
    affiliation: Delft University of Technology
    site: http://casperbp.net/
  - who: Arjen Rouvoet
    affiliation: Delft University of Technology
  - who: Eelco Visser
    affiliation: Delft University of Technology
    site: http://eelcovisser.org/

  publication:

  title: Scopes as Types

  abstract: >
    Scope graphs are a promising generic framework for modeling the binding
    structures of programming languages, bridging formalization and implementation,
    supporting the definition of type checkers and the automation of type safety
    proofs. However, previous work on scope graphs has been limited to simple,
    nominal type systems. In this paper, we show that viewing scopes as types
    enables us to model the internal structure of types in a range of non-simple
    type systems (including structural records and generic classes) using the
    generic representation of scopes. Further, we show that relations between such
    types can be expressed in terms of generalized scope graph queries. We extend
    scope graphs with scoped relations and queries. We introduce Statix, a new
    domain-specific meta-language for the specification of static semantics, based
    on scope graphs and constraints. We evaluate the scopes as types approach and
    the Statix design in case studies of the simply-typed lambda calculus with
    records, System F, and Featherweight Generic Java.

  links:
    pdf: https://dl.acm.org/citation.cfm?doid=3288538.3276484

- authors:

  - who: Casper Bach Poulsen
    affiliation: Delft University of Technology
    site: http://casperbp.net/
  - who: Arjen Rouvoet
    affiliation: Delft University of Technology
  - who: Andrew Tolmach
    affiliation: Portland State University
    site: http://web.cecs.pdx.edu/~apt/
  - who: Robbert Krebbers
    affiliation: Delft University of Technology
    site: https://robbertkrebbers.nl/
  - who: Eelco Visser
    affiliation: Delft University of Technology
    site: http://eelcovisser.org/

  publication:

  title: Intrinsically-Typed Definitional Interpreters for Imperative Languages

  abstract: >
    A definitional interpreter defines the semantics of an object language in
    terms of the (well-known) semantics of a host language, enabling
    understanding and validation of the semantics through execution. Combining a
    definitional interpreter with a separate type system requires a separate
    type safety proof. An alternative approach, at least for pure object
    languages, is to use a dependently-typed language to encode the object
    language type system in the definition of the abstract syntax. Using such
    intrinsically-typed abstract syntax definitions allows the host language
    type checker to verify automatically that the interpreter satisfies type
    safety. Does this approach scale to larger and more realistic object
    languages, and in particular to languages with mutable state and objects?

    In this paper, we describe and demonstrate techniques and libraries in Agda that
    successfully scale up intrinsically-typed definitional interpreters to handle
    rich object languages with non-trivial binding structures and mutable state.
    While the resulting interpreters are certainly more complex than the
    simply-typed lambda-calculus interpreter we start with, we claim that they still
    meet the goals of being concise, comprehensible, and executable, while
    guaranteeing type safety for more elaborate object languages. We make the
    following contributions: (1) A dependent-passing style technique for hiding the
    weakening of indexed values as they propagate through monadic code. (2) An Agda
    library for programming with scope graphs and frames, which provides a uniform
    approach to dealing with name binding in intrinsically-typed interpreters. (3)
    Case studies of intrinsically-typed definitional interpreters for the
    simply-typed lambda-calculus with references (STLC+Ref) and for a large subset
    of Middleweight Java (MJ).

  links:
    pdf: http://casperbp.net/store/intrinsicallytyped.pdf
    code: https://github.com/metaborg/mj.agda
    site: https://metaborg.github.io/mj.agda/
