thesis:
  authors:
    - who: Arjen Rouvoet
      affiliation: Delft University of Technology
      site: https://ajrouvoet.github.io/

  title: Correct by Construction Language Implementations
  publication:

  abstract: >
    This PhD thesis is about the design of meta-languages for the
    specification and implementation of typed programming languages, such that
    the implementation is formally proven type-correct. For language
    front-ends---i.e., type checkers---this thesis investigates an approach to
    automatically obtaining verified type checkers from declarative type-system
    specifications. For language back-ends, this thesis investigates techniques
    for implementing intrinsically typed definitional interpreters and
    compilers. The idea is to use a dependently typed functional language, like
    Agda, to integrate the specification of well-typing in the representation of
    the program that is being interpreted or transformed. We scale this existing
    technique from simply typed functional languages to languages with
    references a la ML, languages with concurrency and session-typed
    cross-thread communication, and a low-level language with labels and
    jumps. We accomplish this using an embedding of proof-relevant monotone
    predicates for the invariant of references, and an embedding of
    proof-relevant separation logic for the sub-structural invariants of the
    interpreter for the linear functional language and of the compiler. We
    deliver interpreters and a compiler that are total and have almost no proof
    overhead. Both the logical languages and the functional abstractions that we
    develop on top are reusable, because they abstract over---among others---the
    algebras that specify the invariants.

  links:
      Preprint: ./files/thesis.pdf

popl:
  authors:
    - who: Arjen Rouvoet
      affiliation: Delft University of Technology
      site: https://ajrouvoet.github.io/
    - who: Robbert Krebbers
      affiliation: Radboud University and Delft University of Technology
      site: https://robbertkrebbers.nl/
    - who: Eelco Visser
      affiliation: Delft University of Technology
      site: http://eelcovisser.org/

  title: Intrinsically Typed Compilation with Nameless Labels
  publication:

  abstract: >
    To avoid compilation errors it is desirable to verify that a compiler is
    type correct---i.e., given well-typed source code, it always outputs well-typed target code.
    This can be done intrinsically by implementing it as a function in a
    dependently typed programming language, such as Agda.
    This function manipulates data types of well-typed source and target programs, and is therefore type correct by construction.
    A key challenge in implementing an intrinsically typed compiler is the representation of labels in bytecode.
    Because label names are global, bytecode typing appears to be inherently a non-compositional, whole-program property.
    The individual operations of the compiler do not preserve this property, which
    requires the programmer to reason about labels, which spoils the compiler
    definition with proof terms.

    In this paper, we address this problem using a new nameless and
    co-contextual representation of typed global label binding, which is compositional.
    Our key idea is to use linearity to ensure that all labels are defined exactly once.
    To write concise compilers that manipulate programs in our representation,
    we develop a linear, dependently typed, shallowly embedded language in Agda, based on separation logic.
    We show that this language enables the concise specification and implementation
    of intrinsically typed operations on bytecode, culminating in an
    intrinsically typed compiler for a language with structured control-flow.

  links:
      Preprint: ./files/popl-21-preprint.pdf
      Agda sources: https://doi.org/10.5281/zenodo.4072067
      Artifact VM: https://doi.org/10.5281/zenodo.4071953
      site: /#/papers/typesafe-compilation
